generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Docs {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  userId      String
  url         String?
  uploadedBy  User     @relation(fields: [userId], references: [id])
}

model Course {
  id          Int        @id @default(autoincrement())
  description String?    @default("")
  schoolId    Int?
  code        String
  name        String     @default("")
  professor   String     @default("")
  small_code  String     @default("")
  unit        String     @default("")
  year        String     @default("")
  School      School?    @relation(fields: [schoolId], references: [id])
}

model School {
  id        Int              @id @default(autoincrement())
  name      String           @default("")
  Course    Course[]
  SchoolUrl SchoolHostname[]
}

model SchoolHostname {
  id       Int    @id @default(autoincrement())
  hostname String @default("")
  schoolId Int
  School   School @relation(fields: [schoolId], references: [id])
}

model Unit {
  id       Int    @id @default(autoincrement())
  name     String @default("")
  fullName String @default("")
  code     Int    @unique @db.SmallInt
}

model Question {
  id               String             @id @default(cuid())
  question         String
  description      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  userId           String
  courseCode       String?
  courseDate       DateTime?
  answer           Answer[]
  user             User               @relation(fields: [userId], references: [id])
  UserVoteQuestion UserVoteQuestion[]
}

model Answer {
  id             String           @id @default(cuid())
  answer         String
  questionId     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  userId         String
  question       Question         @relation(fields: [questionId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  UserVoteAnswer UserVoteAnswer[]
}

model UserVoteAnswer {
  id        Int      @id @default(autoincrement())
  userId    String
  answerId  String
  vote      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  answer    Answer   @relation(fields: [answerId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model UserVoteQuestion {
  id         Int      @id @default(autoincrement())
  userId     String
  questionId String
  vote       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserTimetableURL {
  id     Int    @id @default(autoincrement())
  userId String
  url    String
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  UserTimetableURL UserTimetableURL[]
  Docs             Docs[]
  Question         Question[]
  Answer           Answer[]
  UserVoteAnswer   UserVoteAnswer[]
  UserVoteQuestion UserVoteQuestion[]
  UserRole         UserRole[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  Right       Right[]
  UserRole    UserRole[]
}

model Right {
  id        Int      @id @default(autoincrement())
  featureId Int
  roleId    String
  feature   Feature  @relation(fields: [featureId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Feature {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Right       Right[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BetaList {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Notes {
  id         Int       @id @default(autoincrement())
  userId     String
  title      String
  content    Json
  public     Boolean   @default(false)
  courseCode String?
  courseDate DateTime?
}

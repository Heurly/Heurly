generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Docs {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  uploadedBy  User     @relation(fields: [userId], references: [id])
  userId      String
}

model Course {
  id          Int     @id @default(autoincrement())
  code_cours  String  @default("")
  nom_cours   String  @default("")
  professeur  String? @default("")
  description String? @default("")
  School      School? @relation(fields: [schoolId], references: [id])
  schoolId    Int?
}

model School {
  id        Int              @id @default(autoincrement())
  name      String           @default("")
  Course    Course[]
  SchoolUrl SchoolHostname[]
}

model SchoolHostname {
  id       Int    @id @default(autoincrement())
  hostname String @default("")
  schoolId Int
  School   School @relation(fields: [schoolId], references: [id])
}

model Unit {
  id       Int    @id @default(autoincrement())
  name     String @default("")
  fullName String @default("")
  code     Int    @unique @db.SmallInt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserTimetableURL {
  id     Int    @id @default(autoincrement())
  userId String
  url    String
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  UserTimetableURL UserTimetableURL[]
  Docs             Docs[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
